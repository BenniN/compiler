/*
Demonstration application 'refProc'
*/

MODULE(mRefProc);

SYSTEM;
   stdout: StdOut;
PROBLEM;
    SPC stdout DATION OUT SYSTEM ALPHIC GLOBAL;
    DCL termout DATION OUT ALPHIC DIM(*,80) FORWARD STREAM CREATED(stdout);

! lets create a type for the procedure signature to improve readability
! the current proc is passed as REF PROC, so we need to dereference
! the formal parameter. The Ref class wil throw an exception if there
! is a NULL-pointer
__cpp__(
"typedef void ProcType(pearlrt::Task* me,            "
"                             pearlrt::Character<20>  _c1,  "
"                             pearlrt::Character<10>  _c2); "
"void _invokeRefProc(pearlrt::Task * me,                    "
"                    pearlrt::Ref<ProcType> (p),           "
"                    pearlrt::Character<20>  _c1,           "
"                    pearlrt::Character<10>  _c2) {         "
"     (*p)(me, _c1, _c2);                                   "
"}                                                          "

);

! the task hello is started automatically due to the attribute 'MAIN'
hello: TASK MAIN;
   DCL var1 CHAR(20) INIT('A');
   DCL var2 CHAR(10) INIT('10');
   OPEN termout;
   PUT 'refProc started' TO termout BY A, SKIP;
   PUT 'invoke f' TO termout BY A, SKIP;

! -----------------------
!   CALL invokeRefProc(_f, var1, var2);
! -----------------------
! to pass the current procedure entry, we must create a Ref-object
! of the type with the procedure signature
   __cpp__("_invokeRefProc(me, pearlrt::Ref<ProcType> (_f), _var1, _var2);"); 
! -----------------------

   PUT 'invoke g' TO termout BY A, SKIP;
   var1.CHAR(1) := 'a';
   var2.CHAR(1:10) := '3.14';
!   __cpp__("_invokeRefProc(me, pearlrt::Ref<ProcType>(_g),_var1, _var2);"); 

!   CALL invokeRefProc(g, 'a', 'b');
   CLOSE termout;
END;

/*
invokeRefProc: PROC (p REF PROC(c1 CHAR(20),c2 CHAR(10)), c1 CHAR(20), c2 CHAR(10));
   CALL p(c1, c2);
END;

*/

f: PROC(c1 CHAR(20), c2 CHAR(10));
   DCL c2AsFixed FIXED;
 
  PUT 'f called with *',c1,'*,*',c2,'*' TO termout BY A, A,A,A,A, SKIP;

!   CONVERT c2AsFixed FROM c2 BY F(10);
   __cpp__(
   "  pearlrt::RefCharacter rcC2(_c2);"
   "  pearlrt::StringDationConvert stringDation(&rcC2,false);"
   "  stringDation.fromF(_c2AsFixed, pearlrt::Fixed<31>(6),pearlrt::Fixed<31>(0));"
   );
   PUT 'f: c2 has the FIXED value: ', c2AsFixed TO termout BY A, F(6), SKIP;

END;

g: PROC(c1 CHAR(20), c2 CHAR(10));
   DCL c2AsFloat FLOAT;

   PUT 'g called with *',c1,'*,*',c2,'*' TO termout BY A,A,A,A,A, SKIP;
!   CONVERT c2AsFloat FROM c2 BY F(6,2);
   __cpp__(
   "  pearlrt::RefCharacter rcC2(_c2);"
   "  pearlrt::StringDationConvert stringDation(&rcC2,false);"
   "  stringDation.fromF(_c2AsFloat, pearlrt::Fixed<31>(6),pearlrt::Fixed<31>(2));"
   );
   PUT 'g: c2 has the FLOAT value: ', c2AsFloat TO termout BY A, F(6,3), SKIP;

END;

MODEND;

