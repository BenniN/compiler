/////////////////////////////////////////////////////////////////////////////
// PROLOGUE
/////////////////////////////////////////////////////////////////////////////
#include <PearlIncludes.h>
#include <cmath>

const char* filename = (char*) "ConsolTest.prl";


/////////////////////////////////////////////////////////////////////////////
// CONSTANT POOL
/////////////////////////////////////////////////////////////////////////////
static /*const*/ pearlrt::Fixed<31>         CONSTANT_FIXED_POS_0_31(0);
static /*const*/ pearlrt::Fixed<31>         CONSTANT_FIXED_POS_1_31(1);
static /*const*/ pearlrt::Fixed<31>         CONSTANT_FIXED_NEG_1_31(-1);
static /*const*/ pearlrt::Character<13>         CONSTANT_CHARACTER_1e40df45_0d53_45cf_9db2_37ca94ce9d11("hallo from t1");
static /*const*/ pearlrt::Character<6>         CONSTANT_CHARACTER_e51c6a10_3e46_43db_9675_14f2fb56dfc6("t1 got");
static /*const*/ pearlrt::Character<13>         CONSTANT_CHARACTER_b2a6561c_8742_434f_b1ca_d2b6bd4803b7("hallo from t2");
static /*const*/ pearlrt::Character<6>         CONSTANT_CHARACTER_0b47478e_31f9_4c3c_8153_723fd641137e("t2 got");

/////////////////////////////////////////////////////////////////////////////
// TASK SPECIFIERS
/////////////////////////////////////////////////////////////////////////////
SPCTASK(_t2);
SPCTASK(_t1);


/////////////////////////////////////////////////////////////////////////////
// SYSTEM PART
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// PROBLEM PART
/////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////
// DATION SPECIFICATIONS
/////////////////////////////////////////////////////////////////////////////
extern pearlrt::Device *d_con;
static pearlrt::SystemDationNB* _con = static_cast<pearlrt::SystemDationNB*>(d_con); 



/////////////////////////////////////////////////////////////////////////////
// DATION DECLARATIONS
/////////////////////////////////////////////////////////////////////////////
static pearlrt::DationDim2 h_dim_console(80); 

pearlrt::DationPG _console(_con, pearlrt::Dation::INOUT  | pearlrt::Dation::FORWARD, &h_dim_console);


/////////////////////////////////////////////////////////////////////////////
// TEMPORARY SEMAPHORE ARRAYS
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// TEMPORARY BOLT ARRAYS
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// ARRAY DESCRIPTORS
/////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////
// TASK DECLARATIONS
/////////////////////////////////////////////////////////////////////////////
DCLTASK(_t1, (pearlrt::Prio( (pearlrt::Fixed<15>)255)), ((pearlrt::BitString<1>)1)) {
        pearlrt::Character<10>  _text; 
        pearlrt::Character<10>  _text1; 

        #warning __cpp__ inline inserted
        printf(" t1 started\n");


        me->setLocation(15, filename);
        {
            _console.dationOpen(
                0
            , (pearlrt::Character<1>*) 0
            , (pearlrt::Fixed<31>*) 0
            );
        }

        me->setLocation(16, filename);
#if 1
            _t2.activate( me,
                              0,
                              /* prio   */  pearlrt::Prio(),
                              /* at     */  pearlrt::Clock(),
                              /* after  */  pearlrt::Duration(),
                              /* all    */  pearlrt::Duration(),
                              /* until  */  pearlrt::Clock(),
                              /* during */  pearlrt::Duration()
                            );
#endif
        me->setLocation(17, filename);
        // PUT STATEMENT BEGIN
        {
           size_t one=1;
        pearlrt::IODataEntry dataEntries[] = {
            {.dataType={pearlrt::IODataEntry::CHAR, 13},
             .dataPtr={.outData= &CONSTANT_CHARACTER_1e40df45_0d53_45cf_9db2_37ca94ce9d11},
             .param1={.numberOfElements=&one}
            }
        };
        pearlrt::IOFormatEntry formatEntries[] = {
            {.format=pearlrt::IOFormatEntry::A},
            {.format=pearlrt::IOFormatEntry::SKIP,
             .fp1={.constF31Ptr=&CONSTANT_FIXED_POS_1_31}
            }
        };
        pearlrt::IODataList dataList = {
                 .nbrOfEntries=sizeof(dataEntries)/sizeof(dataEntries[0]),
                 .entry=dataEntries};
        pearlrt::IOFormatList formatList = {
                 .nbrOfEntries=sizeof(formatEntries)/sizeof(formatEntries[0]),
                 .entry=formatEntries,
        };
        _console.put(me, &dataList, &formatList);
      }
#if 0
        try {
            _console.beginSequence(me,Dation::OUT);
            _console.toA(CONSTANT_CHARACTER_1e40df45_0d53_45cf_9db2_37ca94ce9d11) ;
            _console.toSkip((pearlrt::Fixed<31>)(CONSTANT_FIXED_POS_1_31));
            _console.endSequence();
        }
        catch(pearlrt::Signal &s) {
            if ( ! _console.updateRst(&s) ) {
                _console.endSequence();
                throw;
            }
            _console.endSequence();
        }
#endif
        // PUT STATEMENT END

        me->setLocation(19, filename);
        {
                while ( 1 )
                {

                    me->setLocation(20, filename);
                    // GET STATEMENT BEGIN
        {
           size_t one=1;
        pearlrt::IODataEntry dataEntries[] = {
            {.dataType={pearlrt::IODataEntry::CHAR, 10},
             .dataPtr={.inData= &_text},
             .param1={.numberOfElements=&one}
            },
            {.dataType={pearlrt::IODataEntry::CHAR, 10},
             .dataPtr={.inData= &_text1},
             .param1={.numberOfElements=&one}
            }
        };
        pearlrt::IOFormatEntry formatEntries[] = {
            {.format=pearlrt::IOFormatEntry::A},
//            {.format=pearlrt::IOFormatEntry::SKIP,
//             .fp1={.constF31Ptr=&CONSTANT_FIXED_POS_1_31}
//            },
            {.format=pearlrt::IOFormatEntry::A},
            {.format=pearlrt::IOFormatEntry::SKIP,
             .fp1={.constF31Ptr=&CONSTANT_FIXED_POS_1_31}
            }
        };
        pearlrt::IODataList dataList = {
                 .nbrOfEntries=sizeof(dataEntries)/sizeof(dataEntries[0]),
                 .entry=dataEntries};
        pearlrt::IOFormatList formatList = {
                 .nbrOfEntries=sizeof(formatEntries)/sizeof(formatEntries[0]),
                 .entry=formatEntries,
        };
        _console.get(me, &dataList, &formatList);
      }

#if 0
                    try {
                        _console.beginSequence(me,Dation::IN);
printf("1\n");
                        _console.fromA(_text) ;
printf("2\n");
                        _console.fromSkip(me,(pearlrt::Fixed<31>)(1));
printf("3\n");
                        _console.endSequence();
printf("4\n");
                    }
                    catch(pearlrt::Signal &s) {
                        if ( ! _console.updateRst(&s) ) {
                            _console.endSequence();
                            throw;
                        }
                        _console.endSequence();
                    }
#endif
                    // GET STATEMENT END
printf("5\n");
                    me->setLocation(21, filename);
                    // PUT STATEMENT BEGIN
printf("6\n");
        {
           size_t one=1;
        pearlrt::IODataEntry dataEntries[] = {
            {.dataType={pearlrt::IODataEntry::CHAR, 6},
             .dataPtr={.outData= & CONSTANT_CHARACTER_e51c6a10_3e46_43db_9675_14f2fb56dfc6},
             .param1={.numberOfElements=&one}
            },
            {.dataType={pearlrt::IODataEntry::CHAR, 10},
             .dataPtr={.outData= &_text},
             .param1={.numberOfElements=&one}
            },
            {.dataType={pearlrt::IODataEntry::CHAR, 10},
             .dataPtr={.outData= &_text1},
             .param1={.numberOfElements=&one}
            }
        };
        pearlrt::IOFormatEntry formatEntries[] = {
            {.format=pearlrt::IOFormatEntry::A},
            {.format=pearlrt::IOFormatEntry::X,
             .fp1={.constF31Ptr=&CONSTANT_FIXED_POS_1_31}
            },
            {.format=pearlrt::IOFormatEntry::A},
            {.format=pearlrt::IOFormatEntry::X,
             .fp1={.constF31Ptr=&CONSTANT_FIXED_POS_1_31}
            },
            {.format=pearlrt::IOFormatEntry::A},
            {.format=pearlrt::IOFormatEntry::SKIP,
             .fp1={.constF31Ptr=&CONSTANT_FIXED_POS_1_31}
            }
        };
        pearlrt::IODataList dataList = {
                 .nbrOfEntries=sizeof(dataEntries)/sizeof(dataEntries[0]),
                 .entry=dataEntries};
        pearlrt::IOFormatList formatList = {
                 .nbrOfEntries=sizeof(formatEntries)/sizeof(formatEntries[0]),
                 .entry=formatEntries,
        };
        _console.put(me, &dataList, &formatList);
      }
#if 0
                    try {
                        _console.beginSequence(me,Dation::OUT);
                        _console.toA(CONSTANT_CHARACTER_e51c6a10_3e46_43db_9675_14f2fb56dfc6) ;
                        _console.toX((pearlrt::Fixed<31>)(CONSTANT_FIXED_POS_1_31));
                        _console.toA(_text) ;
                        _console.toSkip((pearlrt::Fixed<31>)(CONSTANT_FIXED_POS_1_31));
                        _console.endSequence();
printf("7\n");
                    }
                    catch(pearlrt::Signal &s) {
                        if ( ! _console.updateRst(&s) ) {
                            _console.endSequence();
                            throw;
                        }
                        _console.endSequence();
                    }
#endif
                    // PUT STATEMENT END


                }

        }
        me->setLocation(24, filename);
        _console.dationClose(0, (pearlrt::Fixed<15>*) 0);

}
DCLTASK(_t2, (pearlrt::Prio( (pearlrt::Fixed<15>)255)), ((pearlrt::BitString<1>)0)) {
        pearlrt::Character<10>  _text; 

        #warning __cpp__ inline inserted
        printf(" t2 started\n");


        me->setLocation(30, filename);
        // PUT STATEMENT BEGIN
        {
           size_t one=1;
        pearlrt::IODataEntry dataEntries[] = {
            {.dataType={pearlrt::IODataEntry::CHAR, 13},
             .dataPtr={.outData= & CONSTANT_CHARACTER_b2a6561c_8742_434f_b1ca_d2b6bd4803b7},
             .param1={.numberOfElements=&one}
            }
        };
        pearlrt::IOFormatEntry formatEntries[] = {
            {.format=pearlrt::IOFormatEntry::A},
            {.format=pearlrt::IOFormatEntry::SKIP,
             .fp1={.constF31Ptr=&CONSTANT_FIXED_POS_1_31}
            }
        };
        pearlrt::IODataList dataList = {
                 .nbrOfEntries=sizeof(dataEntries)/sizeof(dataEntries[0]),
                 .entry=dataEntries};
        pearlrt::IOFormatList formatList = {
                 .nbrOfEntries=sizeof(formatEntries)/sizeof(formatEntries[0]),
                 .entry=formatEntries,
        };
        _console.put(me, &dataList, &formatList);
      }
#if 0
        try {
            _console.beginSequence(me, Dation::OUT);
            _console.toA(CONSTANT_CHARACTER_b2a6561c_8742_434f_b1ca_d2b6bd4803b7) ;
            _console.toSkip((pearlrt::Fixed<31>)(CONSTANT_FIXED_POS_1_31));
            _console.endSequence();
        }
        catch(pearlrt::Signal &s) {
            if ( ! _console.updateRst(&s) ) {
                _console.endSequence();
                throw;
            }
            _console.endSequence();
        }
#endif
        // PUT STATEMENT END

        me->setLocation(31, filename);
        {
                while ( 1 )
                {

                    me->setLocation(32, filename);
                    // GET STATEMENT BEGIN
        {
           size_t one=1;
        pearlrt::IODataEntry dataEntries[] = {
            {.dataType={pearlrt::IODataEntry::CHAR, 10},
             .dataPtr={.inData= &_text},
             .param1={.numberOfElements=&one}
            }
        };
        pearlrt::IOFormatEntry formatEntries[] = {
            {.format=pearlrt::IOFormatEntry::A},
            {.format=pearlrt::IOFormatEntry::SKIP,
             .fp1={.constF31Ptr=&CONSTANT_FIXED_POS_1_31}
            }
        };
        pearlrt::IODataList dataList = {
                 .nbrOfEntries=sizeof(dataEntries)/sizeof(dataEntries[0]),
                 .entry=dataEntries};
        pearlrt::IOFormatList formatList = {
                 .nbrOfEntries=sizeof(formatEntries)/sizeof(formatEntries[0]),
                 .entry=formatEntries,
        };
        _console.get(me, &dataList, &formatList);
      }
#if 0
                    try {
                        _console.beginSequence(me,Dation::IN);
                        _console.fromA(_text) ;
                        _console.fromSkip(me,(pearlrt::Fixed<31>)(1));
                        _console.endSequence();
                    }
                    catch(pearlrt::Signal &s) {
                        if ( ! _console.updateRst(&s) ) {
                            _console.endSequence();
                            throw;
                        }
                        _console.endSequence();
                    }
#endif
                    // GET STATEMENT END

                    me->setLocation(33, filename);
                    // PUT STATEMENT BEGIN
        {
           size_t one=1;
        pearlrt::IODataEntry dataEntries[] = {
            {.dataType={pearlrt::IODataEntry::CHAR, 6},
             .dataPtr={.outData= & CONSTANT_CHARACTER_0b47478e_31f9_4c3c_8153_723fd641137e},
             .param1={.numberOfElements=&one}
            },
            {.dataType={pearlrt::IODataEntry::CHAR, 10},
             .dataPtr={.outData= &_text},
             .param1={.numberOfElements=&one}
            }
        };
        pearlrt::IOFormatEntry formatEntries[] = {
            {.format=pearlrt::IOFormatEntry::A},
            {.format=pearlrt::IOFormatEntry::X,
             .fp1={.constF31Ptr=&CONSTANT_FIXED_POS_1_31}
            },
            {.format=pearlrt::IOFormatEntry::A},
            {.format=pearlrt::IOFormatEntry::SKIP,
             .fp1={.constF31Ptr=&CONSTANT_FIXED_POS_1_31}
            }
        };
        pearlrt::IODataList dataList = {
                 .nbrOfEntries=sizeof(dataEntries)/sizeof(dataEntries[0]),
                 .entry=dataEntries};
        pearlrt::IOFormatList formatList = {
                 .nbrOfEntries=sizeof(formatEntries)/sizeof(formatEntries[0]),
                 .entry=formatEntries,
        };
        _console.put(me, &dataList, &formatList);
      }
#if 0
                    try {
                        _console.beginSequence(me,Dation::OUT);
                        _console.toA(CONSTANT_CHARACTER_0b47478e_31f9_4c3c_8153_723fd641137e) ;
                        _console.toX((pearlrt::Fixed<31>)(CONSTANT_FIXED_POS_1_31));
                        _console.toA(_text) ;
                        _console.toSkip((pearlrt::Fixed<31>)(CONSTANT_FIXED_POS_1_31));
                        _console.endSequence();
                    }
                    catch(pearlrt::Signal &s) {
                        if ( ! _console.updateRst(&s) ) {
                            _console.endSequence();
                            throw;
                        }
                        _console.endSequence();
                    }
#endif
                    // PUT STATEMENT END


                }

        }
        me->setLocation(35, filename);
        _console.dationClose(0, (pearlrt::Fixed<15>*) 0);

}



