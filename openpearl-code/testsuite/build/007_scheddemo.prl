/*
 [The "BSD license"]
 Copyright (c) 2012-2013 Rainer Mueller
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:

 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

MODULE(sched_demo);
! SYSTEM;
! termout: StdStream(1);
__cpp__('pearlrt::StdStream ___termout(1);');
__cpp__('pearlrt::Device*  __termout = &___termout;');

!__cpp__('SPCTASK(_TASK1);');
!__cpp__('SPCTASK(_TASK2);');
!__cpp__('SPCTASK(_TASK3);');

PROBLEM;
!SPC termout DATION OUT SYSTEM ALPHIC;
__cpp__('extern pearlrt::Device * __termout;');
__cpp__('pearlrt::SystemDationNB* _termout = static_cast<pearlrt::SystemDationNB*>(__termout); ');

! DCL console DATION OUT ALPHIC DIM(*,80) FORWARD GLOBAL CREATED(termout);
__cpp__(
   'static pearlrt::DationDim2 dim_termout(80);' 
   'pearlrt::DationPG _console(_termout, pearlrt::Dation::OUT|pearlrt::Dation::FORWARD, &dim_termout); '
);


!SPC rr_test PROC GLOBAL;

TASK1: TASK PRIO 2 MAIN;
! --- declare text constants (without prefix)
     __cpp__ (' pearlrt::Character<10> tc_1("Task1 ..."); ');
     __cpp__ (' pearlrt::Character<16> tc_2("Task1 works ..."); ');
     __cpp__ (' pearlrt::Character<15> tc_3("Task1 finished"); ');
     __cpp__ (' pearlrt::Character<30> tc_4("Task1: preventing Task3"); ');
     __cpp__ (' pearlrt::Character<30> tc_5("Task1: terminate  Task2"); ');

     !DCL end CLOCK;
     __cpp__ (' pearlrt::Clock _end; ');
     !OPEN console;
     __cpp__('_console.dationOpen(0,(pearlrt::Character<1>*)NULL,(pearlrt::Fixed<31>*) NULL);	');


     ACTIVATE TASK2 PRIO 10;
!     __cpp__('_TASK2.activate(me, pearlrt::Task::PRIO, pearlrt::Prio(10)); ');

     !PUT "Task1..." BY A, SKIP;
     __cpp__(
             'try {'
             '   _console.beginSequence(me);'
             '   _console.toA(tc_1);'
             '   _console.toSkip(1);'
             '   _console.endSequence();'
             '} catch(pearlrt::Signal &s) {'
             '   if (!_console.updateRst(&s)) {'
             '      _console.endSequence();'
             '      throw;'
             '   } '
             '   _console.endSequence();'
             '}'); 

     !end = NOW() + 10 SEC;
     __cpp__('_end = pearlrt::Clock::now() + pearlrt::Duration(10);	');

     !WHILE NOW() < end REPEAT
     __cpp__('while( pearlrt::Clock::now().compare(_end) < 0) {');

         ! PUT NOW(), "Task 1 works" TO TERM BY T(15,6),X(3),A,SKIP;
     __cpp__(
             'try {'
             '   _console.beginSequence(me);'
	     '   _console.toT(pearlrt::Clock::now(),15,6);'
             '   _console.toX(3);'
             '   _console.toA(tc_2);'
             '   _console.toSkip(1);'
             '   _console.endSequence();'
             '} catch(pearlrt::Signal &s) {'
             '   if (!_console.updateRst(&s)) {'
             '      _console.endSequence();'
             '      throw;'
             '   } '
             '   _console.endSequence();'
             '}'); 

         AFTER 2 SEC RESUME;

     ! END;
     __cpp__('}');

     ! PUT 'Task1: preventing Task3' TO TERM BY A,SKIP;
     __cpp__(
             'try {'
             '   _console.beginSequence(me);'
             '   _console.toA(tc_4);'
             '   _console.toSkip(1);'
             '   _console.endSequence();'
             '} catch(pearlrt::Signal &s) {'
             '   if (!_console.updateRst(&s)) {'
             '      _console.endSequence();'
             '      throw;'
             '   } '
             '   _console.endSequence();'
             '}'); 

     PREVENT TASK3;
     !__cpp__ ('_TASK3.prevent(); ');

     !PUT 'Task1: terminating Task2' TO TERM BY A,SKIP;
     __cpp__(
             'try {'
             '   _console.beginSequence(me);'
             '   _console.toA(tc_5);'
             '   _console.toSkip(1);'
             '   _console.endSequence();'
             '} catch(pearlrt::Signal &s) {'
             '   if (!_console.updateRst(&s)) {'
             '      _console.endSequence();'
             '      throw;'
             '   } '
             '   _console.endSequence();'
             '}'); 

     TERMINATE TASK2;
     !__cpp__ ('_TASK2.terminate(); ');

    ! CALL rr_test;


     ! PUT 'Task1 finished' TO TERM BY A,SKIP;
     __cpp__(
             'try {'
             '   _console.beginSequence(me);'
             '   _console.toA(tc_3);'
             '   _console.toSkip(1);'
             '   _console.endSequence();'
             '} catch(pearlrt::Signal &s) {'
             '   if (!_console.updateRst(&s)) {'
             '      _console.endSequence();'
             '      throw;'
             '   } '
             '   _console.endSequence();'
             '}'); 

END;

TASK2: TASK PRIO 4;
! --- declare text constants (without prefix)
     __cpp__ (' pearlrt::Character<11> tc_1("Task2 works"); ');

   AFTER 5 SEC ALL 3 SEC ACTIVATE TASK3;

   __cpp__('_TASK3.activate(me, pearlrt::Task::PRIO | Task::AFTER | Task::ALL ,'
            '           pearlrt::Prio(3),  // prio'
            '           pearlrt::Clock(0.0),  // at'
            '           pearlrt::Duration(5.0),  // after'
            '           pearlrt::Duration(3.0),  // all'
            '           pearlrt::Clock(0.0),             // until'
            '           pearlrt::Duration(0.0));         // during' );

   !REPEAT
    __cpp__ (' while(1) {');
     !  PUT NOW(),'Task2 works' TO TERM BY T(15,6),X(15),A,SKIP;
     __cpp__(
             'try {'
             '   _console.beginSequence(me);'
	     '   _console.toT(pearlrt::Clock::now(),15,6);'
             '   _console.toX(15);'
             '   _console.toA(tc_1);'
             '   _console.toSkip(1);'
             '   _console.endSequence();'
             '} catch(pearlrt::Signal &s) {'
             '   if (!_console.updateRst(&s)) {'
             '      _console.endSequence();'
             '      throw;'
             '   } '
             '   _console.endSequence();'
             '}'); 


      AFTER 5 SEC RESUME;

   !END; ! of REPEAT
   __cpp__('}');
END;

TASK3: TASK PRIO 6;
! --- declare text constants (without prefix)
     __cpp__ (' pearlrt::Character<11> tc_1("Task3 works"); ');


   ! PUT NOW(),'3 works' TO TERM BY T(15,6),X(25),A,SKIP;
     __cpp__(
             'try {'
             '   _console.beginSequence(me);'
	     '   _console.toT(pearlrt::Clock::now(),15,6);'
             '   _console.toX(25);'
             '   _console.toA(tc_1);'
             '   _console.toSkip(1);'
             '   _console.endSequence();'
             '} catch(pearlrt::Signal &s) {'
             '   if (!_console.updateRst(&s)) {'
             '      _console.endSequence();'
             '      throw;'
             '   } '
             '   _console.endSequence();'
             '}'); 

END;


MODEND;
